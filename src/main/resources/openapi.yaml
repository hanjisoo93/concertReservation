openapi: 3.0.0
info:
  title: Concert Reservation API
  description: >
    - 콘서트 예약 서비스를 구현해 봅니다.
  version: 1.0.0

servers:
  - url: https://api.concert-reservation.com/v1
  
tags:
  - name: Reservation Token
  - name: Concert Schedule
  - name: Concert Seat
  - name: Balance
  - name: Balance History
  - name: Payments

paths:
  /tokens:
    post:
      tags:
        - Reservation Token
      summary: 토큰 생성
      responses:
        200:
          description: Successfully created a token
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 토큰 ID
                  uuid:
                    type: string
                    description: 사용자 식별자
                  status:
                    type: string
                    enum: [ACTIVE, EXPIRED]
                    description: 토큰 상태
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /tokens/{uuid}:
    get:
      tags:
        - Reservation Token
      summary: 토큰 조회
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the reservation token.
      responses:
        200:
          description: Successfully retrieved token details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationToken'
        404:
          description: 유효한 토큰을 찾을 수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /tokens/{uuid}/expire:
    post:
      tags:
        - Reservation Token
      summary: 토큰 만료 처리
      description: UUID를 기반으로 예약 토큰의 상태를 EXPIRED로 만료 처리
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the reservation token.
      responses:
        200:
          description: Token successfully expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 토큰ID
                  uuid:
                    type: string
                    description: 사용자 식별자
                  status:
                    type: string
                    enum: [EXPIRED]
                    description: 토큰 상태
        404:
          description: 유효한 토큰을 찾을  수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

  /concert/schedule/{concertDate}:
    get:
      tags:
        - Concert Schedule
      summary: 콘서트 스케줄 조회
      parameters:
        - name: concertDate
          in: path
          required: true
          schema:
            type: string
            format: date
          description: 조회할 콘서트 날짜 (현재 시간 이전 날짜는 조회되지 않습니다).
      responses:
        200:
          description: 성공적으로 콘서트 스케줄을 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcertSchedule'
        404:
          description: 해당 날짜의 콘서트 스케줄을 찾을 수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
  
  /concert/seats:
    get:
      tags:
        - Concert Seat
      summary: 예약 가능 좌석 리스트 조회
      description: 콘서트 스케줄 ID와 좌석 상태를 기준으로 예약 가능한 좌석 목록을 조회합니다.
      parameters:
        - name: concertScheduleId
          in: query
          required: true
          schema:
            type: integer
          description: 콘서트 스케줄 ID
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: [AVAILABLE]
      responses:
        200:
          description: 성공적으로 좌석 목록을 조회했습니다.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConcertSeat'
        400:
          description: 잘못된 요청입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
        404:
          description: 해당 콘서트 스케줄을 찾을 수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
                    
  /concert/seats/{concertSeatId}:
    get:
      tags:
        - Concert Seat
      summary: 좌석 상세 조회
      description: 특정 좌석 ID를 기반으로 좌석의 상세 정보를 조회합니다.
      parameters:
        - name: concertSeatId
          in: path
          required: true
          schema:
            type: integer
          description: 조회할 콘서트 좌석의 고유 ID
      responses:
        200:
          description: 성공적으로 좌석 정보를 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcertSeat'
        404:
          description: 해당 좌석을 찾을 수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
                    
  /concert/seats/{concertSeatId}/reserve:
    post:
      tags:
        - Concert Seat
      summary: 좌석 예약 요청
      description: 
        특정 좌석의 상태를 RESERVED로 변경하고, 예약 요청을 한 사용자 UUID를 기준으로 토큰의 만료 시간을 요청 시점으로부터 5분으로 설정합니다. 
      parameters:
        - name: concertSeatId
          in: path
          required: true
          schema:
            type: integer
          description: 예약할 콘서트 좌석의 고유 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner_uuid:
                  type: string
                  description: 좌석 예약 요청을 한 사용자 UUID
      responses:
        200:
          description: 좌석이 성공적으로 예약되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 예약된 좌석의 ID
                  status:
                    type: string
                    enum: [RESERVED]
                    description: 예약 후 좌석 상태
                  owner_uuid:
                    type: string
                    description: 좌석 예약자의 UUID
                  expiration_time:
                    type: string
                    format: date-time
                    description: 예약 토큰의 만료 시간 (요청 시점 + 5분)
        400:
          description: 이미 예약된 좌석입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
        404:
          description: 해당 좌석을 찾을 수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
        409:
          description: 좌석이 이미 예약되어 요청이 충돌했습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지

  /concert/seats/{concertSeatId}/confirm:
    post:
      tags:
        - Concert Seat
      summary: 좌석 예약 확정
      description: 
        예약된 좌석의 상태를 CONFIRMED로 변경하고, 해당 좌석의 소유권을 요청자 UUID로 배정합니다.
      parameters:
        - name: concertSeatId
          in: path
          required: true
          schema:
            type: integer
          description: 확정할 콘서트 좌석의 고유 ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner_uuid:
                  type: string
                  description: 좌석 예약 확정을 요청한 사용자 UUID
      responses:
        200:
          description: 좌석이 성공적으로 확정되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 확정된 좌석의 ID
                  status:
                    type: string
                    enum: [CONFIRMED]
                    description: 확정된 좌석의 상태
                  owner_uuid:
                    type: string
                    description: 좌석 소유권이 배정
                    
  /balance/{uuid}:
    get:
      tags:
        - Balance
      summary: 잔액 조회
      description: 특정 사용자의 잔액을 조회합니다.
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: 잔액을 조회할 사용자의 UUID
      responses:
        200:
          description: 성공적으로 잔액을 조회했습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    description: 사용자 UUID
                  balance:
                    type: number
                    format: float
                    description: 현재 잔액
        404:
          description: 사용자를 찾을 수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
        500:
          description: 서버 오류로 인해 잔액 조회에 실패했습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
                    
  /balance/charge:
    post:
      tags:
        - Balance
      summary: 잔액 충전 요청
      description: 특정 사용자의 잔액을 충전합니다. 충전 요청 시 잔액 내역은 `BalanceHistory`에 기록됩니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 충전 요청을 할 사용자 UUID
                amount:
                  type: number
                  format: float
                  description: 충전할 금액
      responses:
        200:
          description: 성공적으로 잔액을 충전했습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    description: 사용자 UUID
                  balance:
                    type: number
                    format: float
                    description: 충전 후 잔액
                  amount:
                    type: number
                    format: float
                    description: 충전된 금액
                  message:
                    type: string
                    description: 성공 메시지
        400:
          description: 잘못된 요청입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
        404:
          description: 사용자를 찾을 수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
        500:
          description: 서버 오류로 인해 잔액 충전에 실패했습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지

  /balance/history:
    post:
      tags:
        - Balance History
      summary: 잔액 변경 기록 저장
      description: 
        사용자 잔액 변경 내역을 저장합니다. 기록에는 변경된 금액, 변경 유형, 변경 후 잔액, 사용자 UUID 등이 포함됩니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalanceHistory'
      responses:
        201:
          description: 잔액 변경 기록이 성공적으로 저장되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceHistory'
        400:
          description: 잘못된 요청입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
        500:
          description: 서버 오류로 인해 기록 저장에 실패했습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
                    
  /payments/process:
    post:
      tags:
        - Payments
      summary: 결제 처리
      description: 
        사용자 UUID를 기반으로 결제를 처리합니다. 요청된 사용자와 관련된 결제 정보를 확인하여 결제를 진행하고, 성공 또는 실패 상태를 반환합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: 결제를 요청한 사용자 UUID
      responses:
        200:
          description: 결제가 성공적으로 처리되었습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: 결제 고유 ID
                  uuid:
                    type: string
                    description: 사용자 UUID
                  concert_seat_id:
                    type: integer
                    description: 결제와 연결된 좌석 ID
                  amount:
                    type: number
                    format: float
                    description: 결제 금액
                  status:
                    type: string
                    enum: [SUCCESS]
                    description: 결제 상태 (성공)
                  paymentTime:
                    type: string
                    format: date-time
                    description: 결제 완료 시간
        400:
          description: 잘못된 요청입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
        404:
          description: 요청된 사용자를 찾을 수 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지
        500:
          description: 서버 오류로 인해 결제 처리에 실패했습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: 에러 메시지

components:
  schemas:
    ReservationToken:
      type: object
      properties:
        id:
          type: integer
          description: 토큰 ID
        uuid:
          type: string
          description: 사용자 식별자
        seatId:
          type: integer
          description: 예약된 좌석ID
        balance:
          type: number
          description: 잔액 정보
        status:
          type: string
          enum: [ACTIVE, EXPIRED]
          description: 토큰 상태
        expiredAt:
          type: string
          format: date-time
          description: 토큰 만료 시간
        createdAt:
          type: string
          format: date-time
          description: 토큰 생성 시간
    ConcertSchedule:
      type: object
      properties:
        id:
          type: integer
          description: 콘서트 스케줄 고유 ID
        concert_date:
          type: string
          format: date
          description: 콘서트 날짜
        created_at:
          type: string
          format: date-time
          description: 콘서트 스케줄 등록 일시
    ConcertSeat:
      type: object
      properties:
        id:
          type: integer
          description: 콘서트 좌석 고유 ID
        concert_schedule_id:
          type: integer
          description: 콘서트 스케줄 정보 ID
        seat_number:
          type: integer
          description: 좌석 번호
          minimum: 1
          maximum: 50
        status:
          type: string
          description: 좌석 상태
          enum: [AVAILABLE, RESERVED, CONFIRMED]
        reservation_time:
          type: string
          format: date-time
          description: 좌석 예약 일시
        owner_uuid:
          type: string
          description: 사용자 UUID
        created_at:
          type: string
          format: date-time
          description: 좌석 생성 일시
    BalanceHistory:
      type: object
      properties:
        id:
          type: integer
          description: 잔액 고유 ID
        uuid:
          type: string
          description: 사용자 UUID
        change_amount:
          type: number
          format: float
          description: 변경된 금액
        balance_after_change:
          type: number
          format: float
          description: 변경 후 잔액
        change_type:
          type: string
          enum: [DEPOSIT, WITHDRAWAL]
          description: 변경 유형
        created_at:
          type: string
          format: date-time
          description: 잔액 정보 등록 일시
    Payments:
      type: object
      properties:
        id:
          type: integer
          description: 결제 고유 ID
        uuid:
          type: string
          description: 사용자 UUID
        concert_seat_id:
          type: integer
          description: 결제와 연결된 좌석의 ID
        amount:
          type: number
          format: float
          description: 결제 금액
        status:
          type: string
          enum: [SUCCESS, FAILED]
          description: 결제 상태
        paymentTime:
          type: string
          format: date-time
          description: 결제 완료 시간